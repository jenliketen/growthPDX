allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- dt.test
roc <- ggplot(predictions, aes(m=Low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
print(roc)
}
?aes
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- dt.test
roc <- ggplot(predictions, aes(d=org.class)) + geom_roc() + style_roc() + coord_equal()
print(roc)
}
allMod[[1]]
table(dt)
install.packages("ROCR")
library(ROCR)
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
predictions$class <- predict(model, data.matrix(data))
hist(predictions)
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
allMod <- list()
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- dt.test
ggplot(predictions, aes(m=Low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
}
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
# predictions$class <- predict(model, data.matrix(data))
hist(predictions)
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
allMod <- list()
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- dt.test
ggplot(predictions, aes(m=Low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
}
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
# predictions$class <- predict(model, data.matrix(data))
pred <- prediction(predictions, response)
eval <- performance(pred, "acc")
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
allMod <- list()
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- dt.test
ggplot(predictions, aes(m=Low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
}
allMod[[1]]$test_predicts
allMod[[1]]$test_predictions
allMod <- list()
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
#predictions <- model.en$test_predictions
#predictions$org.class <- dt.test
#roc <- ggplot(predictions, aes(m=Low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
#print(roc)
}
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
predictions$class <- predict(model, data.matrix(data))
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
allMod <- list()
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
#predictions <- model.en$test_predictions
#predictions$org.class <- dt.test
#ggplot(predictions, aes(m=Low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
}
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- dt.test
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
print(roc)
}
setwd("~/Desktop/growth/data/results")
pdf("roc_curves.pdf",
width=12, height=8)
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- dt.test
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
print(roc)
}
dev.off()
rbinom(200, size=1, prob=0.5)
rnorm(200, mean = D.ex, sd = .65)
View(dt.test)
View(dt.test)
predictions$org.class <- ifelse(dt.test==high, 1, 0)
predictions$org.class <- ifelse(dt.test=="high", 1, 0)
View(predictions)
rm(list=ls())
setwd("~/Desktop/growth/data/results")
library(Biobase)
library(caret)
library(doMC)
library(plotROC)
pdxun <- readRDS("~/Desktop/growth/data/pdxe_untreated.Rda")
dgea <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
dgea <- dgea$`n=50`
dgea <- dgea[which(dgea$P.Value < 0.05), ]
expMatrix <- exprs(pdxun)
expMatrix <- expMatrix[which(apply(expMatrix, 1, var) != 0), ]
expMatrix <- expMatrix[rownames(dgea), ]
expMatrix <- t(expMatrix)
growthClass <- data.frame(id = rownames(pData(pdxun)),
DoublingTime=pData(pdxun)$timeToDouble_published,
Survival=pData(pdxun)$time.last_published, stringsAsFactors=FALSE)
growthClass <- growthClass[-which(growthClass$Survival < 10), ] ## Include only samples with greater than 10 days survival
rownames(growthClass) <- growthClass$id
expMatrix <- expMatrix[growthClass$id, ] ## Subset the gene expression matrix accordingly
growthClass$dtClass <- ifelse(growthClass$DoublingTime > median(growthClass$DoublingTime), "high", "low")
dt <- factor(growthClass$dtClass); names(dt) <- growthClass$id
preProcValues <- preProcess(expMatrix, method=c("center", "scale"))
expMatrix <- predict(preProcValues, expMatrix)
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
predictions$class <- predict(model, data.matrix(data))
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
trainModel <- function(x.train, y.train, x.test=NULL, y.test=NULL, NCPU=3) {
if (NCPU > 1) {registerDoMC(cores=NCPU)}
trCtrl <- trainControl(method="repeatedcv", number=4,
allowParallel=TRUE, savePredictions=TRUE)
lambda.grid <- 10^seq(2, -10, length=10)
alpha.grid <- seq(0, 0.5, length = 6)
searchGrid = expand.grid(alpha=alpha.grid, lambda=lambda.grid)
elastic_net <- train(x=x.train, y=y.train,
method="glmnet", tuneGrid=searchGrid, trControl=trCtrl,
standardize=FALSE, maxit=1000000)
self.predict <- predictAccuracy(elastic_net, x.train, y.train)
if(!is.null(x.test) && !is.null(y.test)) {
test.predict <- predictAccuracy(elastic_net, x.test, y.test)
}
return(list(fit=elastic_net, training_predictions=self.predict, test_predictions=test.predict))
}
allMod <- list()
pdf("roc_curves.pdf",
width=12, height=8)
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- ifelse(dt.test=="high", 1, 0)
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
print(roc)
}
dev.off()
rm(list=ls())
setwd("~/Desktop/growth/data/results")
library(Biobase)
library(caret)
library(doMC)
library(plotROC)
pdxun <- readRDS("~/Desktop/growth/data/pdxe_untreated.Rda")
dgea <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
dgea <- dgea$`n=50`
dgea <- dgea[which(dgea$P.Value < 0.05), ]
expMatrix <- exprs(pdxun)
expMatrix <- expMatrix[which(apply(expMatrix, 1, var) != 0), ]
expMatrix <- expMatrix[rownames(dgea), ]
expMatrix <- t(expMatrix)
growthClass <- data.frame(id = rownames(pData(pdxun)),
DoublingTime=pData(pdxun)$timeToDouble_published,
Survival=pData(pdxun)$time.last_published, stringsAsFactors=FALSE)
growthClass <- growthClass[-which(growthClass$Survival < 10), ] ## Include only samples with greater than 10 days survival
rownames(growthClass) <- growthClass$id
expMatrix <- expMatrix[growthClass$id, ] ## Subset the gene expression matrix accordingly
growthClass$dtClass <- ifelse(growthClass$DoublingTime > median(growthClass$DoublingTime), "high", "low")
dt <- factor(growthClass$dtClass); names(dt) <- growthClass$id
preProcValues <- preProcess(expMatrix, method=c("center", "scale"))
expMatrix <- predict(preProcValues, expMatrix)
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
predictions$class <- predict(model, data.matrix(data))
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
trainModel <- function(x.train, y.train, x.test=NULL, y.test=NULL, NCPU=3) {
if (NCPU > 1) {registerDoMC(cores=NCPU)}
trCtrl <- trainControl(method="repeatedcv", number=4,
allowParallel=TRUE, savePredictions=TRUE)
lambda.grid <- 10^seq(2, -10, length=10)
alpha.grid <- seq(0, 0.5, length = 6)
searchGrid = expand.grid(alpha=alpha.grid, lambda=lambda.grid)
elastic_net <- train(x=x.train, y=y.train,
method="glmnet", tuneGrid=searchGrid, trControl=trCtrl,
standardize=FALSE, maxit=1000000)
self.predict <- predictAccuracy(elastic_net, x.train, y.train)
if(!is.null(x.test) && !is.null(y.test)) {
test.predict <- predictAccuracy(elastic_net, x.test, y.test)
}
return(list(fit=elastic_net, training_predictions=self.predict, test_predictions=test.predict))
}
allMod <- list()
pdf("roc_curves.pdf",
width=12, height=8)
testIndex <- createDataPartition(dt, times=4, p=0.1, list=TRUE)
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- ifelse(dt.test=="high", 1, 0)
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
print(roc)
}
dev.off()
allMod[[4]]$pred
length(allMod)
allMod[[4]]
allMod[[4]]$fit
sum(allMod[[4]]$fit$pred$pred==allMod[[4]]$fit$pred$obs)/length(allMod[[4]]$fit$pred)
sum(allMod[[4]]$fit$pred$pred==allMod[[4]]$fit$pred$obs)/nrow(allMod[[4]]$fit$pred)
allMod <- list()
pdf("roc_curves.pdf",
width=12, height=8)
testIndex <- createDataPartition(dt, times=4, p=0.1, list=TRUE)
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- ifelse(dt.test=="high", 1, 0)
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
auc <- calc_auc(roc)
print(roc)
print(auc)
}
allMod <- list()
pdf("roc_curves.pdf",
width=12, height=8)
testIndex <- createDataPartition(dt, times=4, p=0.1, list=TRUE)
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- ifelse(dt.test=="high", 1, 0)
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
auc <- calc_auc(roc)
print(roc)
print(auc)
}
dev.off()
set.seed(42)
rm(list=ls())
setwd("~/Desktop/growth/data/results")
library(Biobase)
library(caret)
library(doMC)
library(plotROC)
pdxun <- readRDS("~/Desktop/growth/data/pdxe_untreated.Rda")
dgea <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
dgea <- dgea$`n=50`
dgea <- dgea[which(dgea$P.Value < 0.05), ]
expMatrix <- exprs(pdxun)
expMatrix <- expMatrix[which(apply(expMatrix, 1, var) != 0), ]
expMatrix <- expMatrix[rownames(dgea), ]
expMatrix <- t(expMatrix)
growthClass <- data.frame(id = rownames(pData(pdxun)),
DoublingTime=pData(pdxun)$timeToDouble_published,
Survival=pData(pdxun)$time.last_published, stringsAsFactors=FALSE)
growthClass <- growthClass[-which(growthClass$Survival < 10), ] ## Include only samples with greater than 10 days survival
rownames(growthClass) <- growthClass$id
expMatrix <- expMatrix[growthClass$id, ] ## Subset the gene expression matrix accordingly
growthClass$dtClass <- ifelse(growthClass$DoublingTime > median(growthClass$DoublingTime), "high", "low")
dt <- factor(growthClass$dtClass); names(dt) <- growthClass$id
preProcValues <- preProcess(expMatrix, method=c("center", "scale"))
expMatrix <- predict(preProcValues, expMatrix)
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
predictions$class <- predict(model, data.matrix(data))
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
trainModel <- function(x.train, y.train, x.test=NULL, y.test=NULL, NCPU=3) {
if (NCPU > 1) {registerDoMC(cores=NCPU)}
trCtrl <- trainControl(method="repeatedcv", number=4,
allowParallel=TRUE, savePredictions=TRUE)
lambda.grid <- 10^seq(2, -10, length=10)
alpha.grid <- seq(0, 0.5, length = 6)
searchGrid = expand.grid(alpha=alpha.grid, lambda=lambda.grid)
elastic_net <- train(x=x.train, y=y.train,
method="glmnet", tuneGrid=searchGrid, trControl=trCtrl,
standardize=FALSE, maxit=1000000)
self.predict <- predictAccuracy(elastic_net, x.train, y.train)
if(!is.null(x.test) && !is.null(y.test)) {
test.predict <- predictAccuracy(elastic_net, x.test, y.test)
}
return(list(fit=elastic_net, training_predictions=self.predict, test_predictions=test.predict))
}
allMod <- list()
pdf("roc_curves.pdf",
width=12, height=8)
set.seed(42)
testIndex <- createDataPartition(dt, times=4, p=0.1, list=TRUE)
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
model.en <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- model.en
predictions <- model.en$test_predictions
predictions$org.class <- ifelse(dt.test=="high", 1, 0)
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
auc <- calc_auc(roc)
print(roc)
print(auc)
}
dev.off()
trainModel <- function(x.train, y.train, x.test=NULL, y.test=NULL, NCPU=3) {
if (NCPU > 1) {registerDoMC(cores=NCPU)}
trnCtrl <- trainControl(method="repeatedcv", number=4,
allowParallel=TRUE, savePredictions=TRUE)
lambda.grid <- 10^seq(2, -10, length=10)
alpha.grid <- seq(0, 0.5, length = 6)
srchGrid = expand.grid(.alpha=alpha.grid, lambda=.lambda.grid)
my_train <- train(x=x.train, y=y.train,
method="glmnet", tuneGrid=srchGrid, trControl=trnCtrl,
standardize=FALSE, maxit=1000000)
self.predict <- predictAccuracy(my_train, x.train, y.train)
if(!is.null(x.test) && !is.null(y.test)) {
test.predict <- predictAccuracy(my_train, x.test, y.test)
}
return(list(fit=my_train, training_predictions=self.predict, test_predictions=test.predict))
}
rm(list=ls())
setwd("~/Desktop/growth/data/results")
library(Biobase)
library(caret)
library(doMC)
library(plotROC)
pdxun <- readRDS("~/Desktop/growth/data/pdxe_untreated.Rda")
dgea <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
dgea <- dgea$`n=50`
dgea <- dgea[which(dgea$P.Value < 0.05), ]
expMatrix <- exprs(pdxun)
expMatrix <- expMatrix[which(apply(expMatrix, 1, var) != 0), ]
expMatrix <- expMatrix[rownames(dgea), ]
expMatrix <- t(expMatrix)
growthClass <- data.frame(id = rownames(pData(pdxun)),
DoublingTime=pData(pdxun)$timeToDouble_published,
Survival=pData(pdxun)$time.last_published, stringsAsFactors=FALSE)
growthClass <- growthClass[-which(growthClass$Survival < 10), ] ## Include only samples with greater than 10 days survival
rownames(growthClass) <- growthClass$id
expMatrix <- expMatrix[growthClass$id, ] ## Subset the gene expression matrix accordingly
growthClass$dtClass <- ifelse(growthClass$DoublingTime > median(growthClass$DoublingTime), "high", "low")
dt <- factor(growthClass$dtClass); names(dt) <- growthClass$id
preProcValues <- preProcess(expMatrix, method=c("center", "scale"))
expMatrix <- predict(preProcValues, expMatrix)
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
predictions$class <- predict(model, data.matrix(data))
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
trainModel <- function(x.train, y.train, x.test=NULL, y.test=NULL, NCPU=3) {
if (NCPU > 1) {registerDoMC(cores=NCPU)}
trnCtrl <- trainControl(method="repeatedcv", number=4,
allowParallel=TRUE, savePredictions=TRUE)
lambda.grid <- 10^seq(2, -10, length=10)
alpha.grid <- seq(0, 0.5, length = 6)
srchGrid = expand.grid(.alpha=alpha.grid, lambda=.lambda.grid)
my_train <- train(x=x.train, y=y.train,
method="glmnet", tuneGrid=srchGrid, trControl=trnCtrl,
standardize=FALSE, maxit=1000000)
self.predict <- predictAccuracy(my_train, x.train, y.train)
if(!is.null(x.test) && !is.null(y.test)) {
test.predict <- predictAccuracy(my_train, x.test, y.test)
}
return(list(fit=my_train, training_predictions=self.predict, test_predictions=test.predict))
}
allMod <- list()
pdf("roc_curves.pdf",
width=12, height=8)
set.seed(42)
testIndex <- createDataPartition(dt, times=4, p=0.1, list=TRUE)
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
elastic_net <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- elastic_net
predictions <- elastic_net$test_predictions
predictions$org.class <- ifelse(dt.test=="high", 1, 0)
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
auc <- calc_auc(roc)
print(roc)
print(auc)
}
rm(list=ls())
setwd("~/Desktop/growth/data/results")
library(Biobase)
library(caret)
library(doMC)
library(plotROC)
pdxun <- readRDS("~/Desktop/growth/data/pdxe_untreated.Rda")
dgea <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
dgea <- dgea$`n=50`
dgea <- dgea[which(dgea$P.Value < 0.05), ]
expMatrix <- exprs(pdxun)
expMatrix <- expMatrix[which(apply(expMatrix, 1, var) != 0), ]
expMatrix <- expMatrix[rownames(dgea), ]
expMatrix <- t(expMatrix)
growthClass <- data.frame(id = rownames(pData(pdxun)),
DoublingTime=pData(pdxun)$timeToDouble_published,
Survival=pData(pdxun)$time.last_published, stringsAsFactors=FALSE)
growthClass <- growthClass[-which(growthClass$Survival < 10), ] ## Include only samples with greater than 10 days survival
rownames(growthClass) <- growthClass$id
expMatrix <- expMatrix[growthClass$id, ] ## Subset the gene expression matrix accordingly
growthClass$dtClass <- ifelse(growthClass$DoublingTime > median(growthClass$DoublingTime), "high", "low")
dt <- factor(growthClass$dtClass); names(dt) <- growthClass$id
preProcValues <- preProcess(expMatrix, method=c("center", "scale"))
expMatrix <- predict(preProcValues, expMatrix)
predictAccuracy <- function(model, data, response) {
predictions <- predict(model, data.matrix(data), type="prob")
predictions$class <- predict(model, data.matrix(data))
accuracy <- caret::confusionMatrix(predictions$class, response)
print(accuracy)
return(predictions)
}
trainModel <- function(x.train, y.train, x.test=NULL, y.test=NULL, NCPU=3) {
if (NCPU > 1) {registerDoMC(cores=NCPU)}
trnCtrl <- trainControl(method="repeatedcv", number=4,
allowParallel=TRUE, savePredictions=TRUE)
lambda.grid <- 10^seq(2, -10, length=10)
alpha.grid <- seq(0, 0.5, length = 6)
srchGrid = expand.grid(.alpha=alpha.grid, .lambda=lambda.grid)
my_train <- train(x=x.train, y=y.train,
method="glmnet", tuneGrid=srchGrid, trControl=trnCtrl,
standardize=FALSE, maxit=1000000)
self.predict <- predictAccuracy(my_train, x.train, y.train)
if(!is.null(x.test) && !is.null(y.test)) {
test.predict <- predictAccuracy(my_train, x.test, y.test)
}
return(list(fit=my_train, training_predictions=self.predict, test_predictions=test.predict))
}
allMod <- list()
pdf("roc_curves.pdf",
width=12, height=8)
set.seed(42)
testIndex <- createDataPartition(dt, times=4, p=0.1, list=TRUE)
for(ts in testIndex) {
genes.train=expMatrix[-ts, ]; genes.test= expMatrix[ts, ]
dt.train=dt[rownames(genes.train)]; dt.test=dt[rownames(genes.test)]
elastic_net <- trainModel(genes.train, dt.train, genes.test, dt.test, NCPU=3)
allMod[[length(allMod)+1]] <- elastic_net
predictions <- elastic_net$test_predictions
predictions$org.class <- ifelse(dt.test=="high", 1, 0)
roc <- ggplot(predictions, aes(m=low, d=org.class)) + geom_roc() + style_roc() + coord_equal()
auc <- calc_auc(roc)
print(roc)
print(auc)
}
dev.off()
allMod[[4]]$fit$pred
allMod[[4]]$test_predictions
