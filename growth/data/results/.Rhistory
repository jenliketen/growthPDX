plot <- plot + geom_boxplot() + scale_fill_manual(values=colClass)
plot <- plot + theme_bw() + theme(panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
axis.line=element_line(color="black"),
plot.title=element_text(hjust=0.5))
plot <- plot + geom_dotplot(binaxis="y", stackdir="center", dotsize=0.5)
plot <- plot + theme(legend.position="none")
return(plot)
}
pdf("growth_plot_classes.pdf",
width=12, height=8)
growthClass.boxplot(growthClassData=growthClass, varClass="dtClass", varFeature="DoublingTime")
growthClass.boxplot(growthClassData=growthClass, varClass="surClass", varFeature="Survival")
growthClass.boxplot(growthClassData=growthClass, varClass="slClass", varFeature="Slope")
dev.off()
##### FROM NOW ON FOCUS ON DOUBLING TIME ONLY #####
# Check for heteroscedasticity
cpm.mat <- log(cpm(exprs(pdxun)))
mean.vec <- apply(cpm.mat, 1, mean)
sd.vec <- apply(cpm.mat, 1, sd)
doublingTimeSpread <- plot(mean.vec, sd.vec, pch=".",
ylab="sd", xlab="Average logCPM", main="PDXE")
## As expected, we see from the plot that the expression values are heteroscedastic
################## 1x1x1 PDX experimental design; number of replicates is 1!!! ###################
### We do not know how much error there is with the median doubling time, so we take values at ###
############################## the extremes to fall on the safe side #############################
# First, we try subsetting the highest and lowest N doubling time values
## Subset N samples
samples.subset <- function(growthFeature, n) {
growthClass <- sortByCol(x=growthClass, col=growthFeature, asc=FALSE)
subsettedSamples <- growthClass[c(1:n, (nrow(growthClass)-n+1):nrow(growthClass)), ]
phenoDataSubsetted <- pData(pdxun)[subsettedSamples$id, ]
tissuesIncluded <- table(phenoDataSubsetted$tumor.type, subsettedSamples$dtClass) ## Make sure all tissue types are included in our selection
if (any(tissuesIncluded==0)) {
warning("Not all tissue types are included. Would you like to change the value of N?")
}
return(subsettedSamples)
}
## Subset expression data for the selected N samples
expression.subset <- function(n) {
growthClass <- sortByCol(x=growthClass, col="DoublingTime", asc=FALSE)
subsettedSamples <- growthClass[c(1:n, (nrow(growthClass)-n+1):nrow(growthClass)), ]
expressionSubsetted <- exprs(pdxun)[, subsettedSamples$id]
return(expressionSubsetted)
}
# Preprocessing for the expression matrix; generate Z-scores
## The function assumes that the column means are zero
centerAndScale <- function(trData, tsData=NULL) {
preProcValues <- caret::preProcess(trData, method=c("center", "scale"))
trS <- predict(preProcValues, trData)
if (is.null(tsData)) {
return(trS)
}
tsS <- predict(preProcValues, tsData) ## The tsData will be the TCGA data we feed in for ML later
return(list(tr_data=trS, ts_data=tsS, scale_fact=preProcValues))
}
## Prepare sample and expression data
sampleDataAllN <- list()
expDataAllN <- list()
for (i in c(18, seq(20, 50, by=5))) {
samples <- samples.subset("DoublingTime", n=i)
expS <- expression.subset(n=i)
expS <- expS[which(apply(expS, 1, var)!=0), ] ## Remove genes with zero variance or function complains
expS <- t(centerAndScale(t(expS))) ## Tranpose twice because we want our row means to be zero
sampleDataAllN[[paste0("n=", i)]] <- samples
expDataAllN[[paste0("n=", i)]] <- expS
}
## Plots for inspection
pdf("dtClasses_plot.pdf",
width=12, height=8)
for (i in 1:length(sampleDataAllN)) {
print(growthClass.boxplot(growthClassData=sampleDataAllN[[i]], varClass="dtClass", varFeature="DoublingTime"))
}
dev.off()
# Limma baseline model for t-test
## Ideally we would use DESeq2 or edgeR to correct for heteroscedasticity, but alas, we do not
## have raw count data
doDiffExp <- function(mat, flab) {
design <- model.matrix(~flab)
fitTrtMean <- limma::lmFit(mat, design)
efit <- limma::eBayes(fitTrtMean)
diffLst <- topTable(efit, coef=2, number=dim(mat)[1], sort.by="logFC")
diffLst$abs.logFC <- abs(diffLst$logFC)
diffLst <- BBmisc::sortByCol(diffLst, c("abs.logFC"), asc=FALSE)
return(diffLst)
}
doublingTime.doDiffExp.N <- list()
for (i in 1:length(sampleDataAllN)) {
doublingTime.doDiffExp.N[[i]] <- doDiffExp(expDataAllN[[i]], sampleDataAllN[[i]]$dtClass)
}
howManySamples <- c()
for (i in c(18, seq(20, 50, by=5))) {
howManySamples <- c(howManySamples, paste0("n=", i))
}
names(doublingTime.doDiffExp.N) <- howManySamples
saveRDS(doublingTime.doDiffExp.N, file="diff_gene_exp_doublingTime_N.Rda")
# We can also try taking the high values above the 3rd quartile and the low ones below the 1st quartile
## Prepare sample and expression data
above_3_quart <- growthClass[which(growthClass$DoublingTime > quantile(growthClass$DoublingTime, 0.75)), ]
below_1_quart <- growthClass[which(growthClass$DoublingTime < quantile(growthClass$DoublingTime, 0.25)), ]
samplesByQuartiles <- rbind(above_3_quart, below_1_quart)
dim(samplesByQuartiles) ## In this case N=43, similar to the case we did for N=45
expressionByQuartiles <- expression.subset(n=nrow(above_3_quart))
expressionByQuartiles <- expressionByQuartiles[-which(apply(expressionByQuartiles, 1, var)==0), ] ## Remove genes with zero variance or function complains
expressionByQuartiles <- t(centerAndScale(t(expressionByQuartiles))) ## Tranpose twice because we want our row means to be zero
doublingTime.doDiffExp.quartiles <- doDiffExp(expressionByQuartiles, samplesByQuartiles$dtClass)
saveRDS(doublingTime.doDiffExp.quartiles, file="diff_gene_exp_doublingTime_quartiles.Rda")
View(doublingTime.doDiffExp.quartiles)
doublingTime_N <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
doublingTime_quartiles <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_quartiles.Rda")
rm(list=ls())
doublingTime_N <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
doublingTime_quartiles <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_quartiles.Rda")
rm(list=ls())
gc()
gc()
doublingTime_N <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
doublingTime_quartiles <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_quartiles.Rda")
rm(list=ls())
doublingTime_N <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
doublingTime_quartiles <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_quartiles.Rda")
View(doublingTime_N$`n=18`$P.Value)
geneStat <- doublingTime_N[[1]]$P.Value
View(geneStat)
for (i in 1:length(doublingTime_quartiles)) {
geneStat <- doublingTime_quartiles$P.Value
names(geneStat) <- rownames(doublingTime_quartiles)
}
View(geneStat)
geneStat <- doublingTime_quartiles$P.Value
names(geneStat) <- rownames(doublingTime_quartiles)
geneStat <- doublingTime_quartiles$P.Value
names(geneStat) <- rownames(doublingTime_quartiles)
for (i in 1:length(doublingTime_N)) {
geneStat <- doublingTime_N[[i]]$P.Value
names(geneStat) <- rownames(doublingTime_N[[i]])
geneStatDir <- doublingTime_N[[i]]$logFC/abs(doublingTime_N[[i]]$logFC)
names(geneStatDir) <- rownames(doublingTime_N[[i]])
geneSetStat="mean"
}
View(geneStat)
View(geneStatDir)
geneStat <- list()
geneStatDir <- list()
for (i in 1:length(doublingTime_N)) {
geneStat[[i]] <- doublingTime_N[[i]]$P.Value
names(geneStat[[i]]) <- rownames(doublingTime_N[[i]])
geneStatDir[[i]] <- doublingTime_N[[i]]$logFC/abs(doublingTime_N[[i]]$logFC)
names(geneStatDir[[i]]) <- rownames(doublingTime_N[[i]])
geneSetStat="mean"
}
View(geneStat)
geneStat <- list()
geneStatDir <- list()
for (i in 1:length(doublingTime_N)) {
geneStat[[i]] <- doublingTime_N[[i]]$P.Value
names(geneStat) <- rownames(doublingTime_N[[i]])
geneStatDir[[i]] <- doublingTime_N[[i]]$logFC/abs(doublingTime_N[[i]]$logFC)
names(geneStatDir[[i]]) <- rownames(doublingTime_N[[i]])
geneSetStat="mean"
}
geneStat <- list()
geneStatDir <- list()
for (i in 1:length(doublingTime_N)) {
geneStat[[i]] <- doublingTime_N[[i]]$P.Value
names(geneStat[[i]]) <- rownames(doublingTime_N[[i]])
geneStatDir[[i]] <- doublingTime_N[[i]]$logFC/abs(doublingTime_N[[i]]$logFC)
names(geneStatDir[[i]]) <- rownames(doublingTime_N[[i]])
geneSetStat="mean"
}
View(geneStat[[1]])
howManySamples <- c()
for (i in c(18, seq(20, 50, by=5))) {
howManySamples <- c(howManySamples, paste0("n=", i))
}
names(geneStat) <- howManySamples
View(geneStat$`n=18`)
names(geneStat) <- howManySamples
names(geneStatDir) <- howManySamples
View(geneStatDir$`n=18`)
rm(list=ls())
doublingTime_N <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
doublingTime_quartiles <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_quartiles.Rda")
View(doublingTime_N$`n=18`)
View(doublingTime_N$`n=50`)
View(doublingTime_N$`n=25`)
doublingTime_N18 <- doublingTime_N$`n=18`
doublingTime_N25 <- doublingTime_N$`n=25`
doublingTime_N50 <- doublingTime_N$`n=50`
View(doublingTime_N18)
View(doublingTime_N25)
View(doublingTime_N50)
library(BBmisc)
View(sortByCol(x=doublingTime_N18, adj.P.Val, asc=FALSE))
View(sortByCol(x=doublingTime_N18, "adj.P.Val", asc=FALSE))
View(sortByCol(x=doublingTime_N18, "adj.P.Val", asc=TRUE))
rm(doublingTime_N18)
geneStat <- doublingTime_N25$P.Value
names(geneStat) <- rownames(doublingTime_N25)
View(doublingTime_N25)
View(geneStat)
geneStatDir <- doublingTime_N25$logFC / abs(doublingTime_N25$logFC)
geneStatDir <- doublingTime_N25$logFC / abs(doublingTime_N25$logFC)
names(geneStatDir) <- rownames(doublingTime_N25)
library(BBmisc)
geneSetStat <- "mean"
pathwayDB <- "~/Data/c5.bp.v6.0.symbols.gmt"
pathwayDB <- "~/Desktop/growth/Data/c5.bp.v6.0.symbols.gmt"
library(piano)
library(BBmisc)
library(piano)
gscDf <- piano::loadGSC(pathwayDB)
gscDf <- loadGSC(pathwayDB)
pathwayDB <- "~/Desktop/growth/Data/c5.bp.v6.0.symbols.gmt"
gscDf <- loadGSC(pathwayDB)
gscDf <- loadGSC("~/Desktop/growth/Data/c5.bp.v6.0.symbols.gmt")
gscDf <- loadGSC(file="~/Desktop/growth/Data/c5.bp.v6.0.symbols.gmt")
pathwayDB <- "~/Data/c5.bp.v6.0.symbols.gmt"
gscDf <- loadGSC(file=pathwayDB)
pathwayDB <- "~/Desktop/growth/data/c5.bp.v6.2.symbols.gmt"
gscDf <- loadGSC(file=pathwayDB)
View(gscDf$gsc)
View(gscDf$gsc$GO_POSITIVE_REGULATION_OF_VIRAL_TRANSCRIPTION)
gscDf <- piano::loadGSC(file=pathwayDB)
gscDf <- piano::loadGSC(file=pathwayDB)
gsaRes <- piano::runGSA(geneLevelStats=geneStat,
geneSetStat=geneSetStat,
directions=geneStatDir,
gsc=gscDf, nPerm=1000, ncpus=2)
install.packages("snow")
library(snow)
gsaRes <- piano::runGSA(geneLevelStats=geneStat,
geneSetStat=geneSetStat,
directions=geneStatDir,
gsc=gscDf, nPerm=1000, ncpus=2)
View(gsaRes$info)
gsaRes$info
gsaRes$nGenesTot
gsaRes
gst <- GSAsummaryTable(gsaRes); rownames(gst) <- NULL
View(gst)
gst <- GSAsummaryTable(gsaRes) #; rownames(gst) <- NULL
gst <- GSAsummaryTable(gsaRes); rownames(gst) <- NULL
View(gst)
"p (non-dir.)" %in% colnames(gst)
gst[, c("p", "fdr", "dir")] <- NA
gst <- GSAsummaryTable(gsaRes); rownames(gst) <- NULL
gst <- GSAsummaryTable(gsaRes); rownames(gst) <- NULL
if("p (non-dir.)" %in% colnames(gst)) {
gst <- BBmisc::sortByCol(gst, c("p (non-dir.)"), asc=c(TRUE))
} else {
gst[, c("p", "fdr", "dir")] <- NA
}
!is.na(gst[i,"p (dist.dir.up)"])
!is.na(gst[1, "p (dist.dir.up)"])
gst <- GSAsummaryTable(gsaRes); rownames(gst) <- NULL
if("p (non-dir.)" %in% colnames(gst)) {
gst <- BBmisc::sortByCol(gst, c("p (non-dir.)"), asc=c(TRUE))
} else {
gst[, c("p", "fdr", "dir")] <- NA
for(i in 1:nrow(gst))
{
if(!is.na(gst[i,"p (dist.dir.up)"]))
{
gst[i, "p"] <- gst[i, "p (dist.dir.up)"]
gst[i, "dir"] <- "up"
} else {
gst[i, "p"] <- gst[i,"p (dist.dir.dn)"]
gst[i, "dir"] <- "dn"
}
}
gst$fdr <- p.adjust(gst$p, "fdr")
gst <- gst[, c("Name", "Genes (tot)", "Stat (dist.dir)",
"Genes (up)", "Genes (down)", "p", "fdr", "dir")]
gst <- sortByCol(gst, c("fdr", "p"))
rownames(gst) <- NULL
}
gst <- GSAsummaryTable(gsaRes); rownames(gst) <- NULL
if("p (non-dir.)" %in% colnames(gst)) {
gst <- BBmisc::sortByCol(gst, c("p (non-dir.)"), asc=c(TRUE))
} else {
gst[, c("p", "fdr", "dir")] <- NA
for(i in 1:nrow(gst))
{
if(!is.na(gst[i,"p (dist.dir.up)"]))
{
gst[i, "p"] <- gst[i, "p (dist.dir.up)"]
gst[i, "dir"] <- "up"
} else {
gst[i, "p"] <- gst[i,"p (dist.dir.dn)"]
gst[i, "dir"] <- "dn"
}
}
gst$fdr <- p.adjust(gst$p, "fdr")
gst <- gst[, c("Name", "Genes (tot)", "Stat (dist.dir)",
"Genes (up)", "Genes (down)", "p", "fdr", "dir")]
gst <- sortByCol(gst, c("fdr", "p"))
rownames(gst) <- NULL
}
gst[gst$dir=="up", "Name"][1:10]
gst[gst$dir=="dn", "Name"][1:10]
gscDf <- piano::loadGSC(file=pathwayDB)
gsaRes <- piano::runGSA(geneLevelStats=geneStat,
geneSetStat="gsea",
directions=geneStatDir,
gsc=gscDf, nPerm=1000, ncpus=2)
gscDf <- piano::loadGSC(file=pathwayDB)
gsaRes <- piano::runGSA(geneLevelStats=geneStat,
geneSetStat="mean",
directions=geneStatDir,
gsc=gscDf, nPerm=1000, ncpus=2)
geneStat1 <- doublingTime_N25$logFC
names(geneStat1) <- rownames(doublingTime_N25)
gsaRes1 <- piano::runGSA(geneLevelStats=geneStat1,
geneSetStat="gsea",
directions=geneStatDir,
gsc=gscDf, nPerm=1000, ncpus=2)
gst1 <- GSAsummaryTable(gsaRes1)
View(gst1)
gst1 <- GSAsummaryTable(gsaRes1)
View(gst1)
if("p (non-dir.)" %in% colnames(gst1)) {
gst <- BBmisc::sortByCol(gst, c("p (non-dir.)"), asc=c(TRUE))
} else {
gst[, c("p", "fdr", "dir")] <- NA
for(i in 1:nrow(gst1))
{
if(!is.na(gst1[i,"p (dist.dir.up)"]))
{
gst1[i, "p"] <- gst[i, "p (dist.dir.up)"]
gst1[i, "dir"] <- "up"
} else {
gst1[i, "p"] <- gst[i,"p (dist.dir.dn)"]
gst1[i, "dir"] <- "dn"
}
}
gst1$fdr <- p.adjust(gst$p, "fdr")
gst1 <- gst1[, c("Name", "Genes (tot)", "Stat (dist.dir)",
"Genes (up)", "Genes (down)", "p", "fdr", "dir")]
gst1 <- sortByCol(gst, c("fdr", "p"))
rownames(gst1) <- NULL
}
View(gst1)
gst1 <- GSAsummaryTable(gsaRes1)
dim(gst1)
"p (non-dir.)" %in% colnames(gst1)
gst1 <- GSAsummaryTable(gsaRes1)
if("p (non-dir.)" %in% colnames(gst1)) {
gst <- BBmisc::sortByCol(gst, c("p (non-dir.)"), asc=c(TRUE))
} else {
gst[, c("p", "fdr", "dir")] <- NA
for(i in 1:nrow(gst1))
{
if(!is.na(gst1[i,"p (dist.dir.up)"]))
{
gst1[i, "p"] <- gst[i, "p (dist.dir.up)"]
gst1[i, "dir"] <- "up"
} else {
gst1[i, "p"] <- gst[i,"p (dist.dir.dn)"]
gst1[i, "dir"] <- "dn"
}
}
gst1$fdr <- p.adjust(gst$p, "fdr")
gst1 <- gst1[, c("Name", "Genes (tot)", "Stat (dist.dir)",
"Genes (up)", "Genes (down)", "p", "fdr", "dir")]
gst1 <- sortByCol(gst, c("fdr", "p"))
rownames(gst1) <- NULL
}
gst1 <- GSAsummaryTable(gsaRes1)
if("p (non-dir.)" %in% colnames(gst1)) {
gst1 <- BBmisc::sortByCol(gst1, c("p (non-dir.)"), asc=c(TRUE))
} else {
gst1[, c("p", "fdr", "dir")] <- NA
for(i in 1:nrow(gst1))
{
if(!is.na(gst1[i,"p (dist.dir.up)"]))
{
gst1[i, "p"] <- gst1[i, "p (dist.dir.up)"]
gst1[i, "dir"] <- "up"
} else {
gst1[i, "p"] <- gst1[i,"p (dist.dir.dn)"]
gst1[i, "dir"] <- "dn"
}
}
gst1$fdr <- p.adjust(gst1$p, "fdr")
gst1 <- gst1[, c("Name", "Genes (tot)", "Stat (dist.dir)",
"Genes (up)", "Genes (down)", "p", "fdr", "dir")]
gst1 <- sortByCol(gst, c("fdr", "p"))
rownames(gst1) <- NULL
}
gst1 <- GSAsummaryTable(gsaRes1)
if("p (non-dir.)" %in% colnames(gst1)) {
gst1 <- BBmisc::sortByCol(gst1, c("p (non-dir.)"), asc=c(TRUE))
} else {
gst1[, c("p", "fdr", "dir")] <- NA
for(i in 1:nrow(gst1))
{
if(!is.na(gst1[i,"p (dist.dir.up)"]))
{
gst1[i, "p"] <- gst1[i, "p (dist.dir.up)"]
gst1[i, "dir"] <- "up"
} else {
gst1[i, "p"] <- gst1[i,"p (dist.dir.dn)"]
gst1[i, "dir"] <- "dn"
}
}
gst1$fdr <- p.adjust(gst1$p, "fdr")
gst1 <- gst1[, c("Name", "Genes (tot)", "Stat (dist.dir)",
"Genes (up)", "Genes (down)", "p", "fdr", "dir")]
gst1 <- sortByCol(gst1, c("fdr", "p"))
rownames(gst1) <- NULL
}
gst1[gst1$dir=="up", "Name"][1:10]
gst1[gst1$dir=="dn", "Name"][1:10]
gsaRes1 <- piano::runGSA(geneLevelStats=geneStat1,
geneSetStat="gsea",
directions=geneStatDir,
gsc=gscDf, nPerm=1000, ncpus=2)
geneStat <- doublingTime_N25$logFC
names(geneStat) <- rownames(doublingTime_N25)
gsaRes <- piano::runGSA(geneLevelStats=geneStat,
geneSetStat="gsea",
directions=NULL,
gsc=gscDf, nPerm=1000, ncpus=2)
gst <- GSAsummaryTable(gsaRes); rownames(gst) <- NULL
View(gst)
if("p (non-dir.)" %in% colnames(gst)) {
gst <- BBmisc::sortByCol(gst, c("p (non-dir.)"), asc=c(TRUE))
} else {
gst[, c("p", "fdr", "dir")] <- NA
for(i in 1:nrow(gst))
{
if(!is.na(gst[i,"p (dist.dir.up)"]))
{
gst[i, "p"] <- gst[i, "p (dist.dir.up)"]
gst[i, "dir"] <- "up"
} else {
gst[i, "p"] <- gst[i,"p (dist.dir.dn)"]
gst[i, "dir"] <- "dn"
}
}
gst$fdr <- p.adjust(gst$p, "fdr")
gst <- gst[, c("Name", "Genes (tot)", "Stat (dist.dir)",
"Genes (up)", "Genes (down)", "p", "fdr", "dir")]
gst <- sortByCol(gst, c("fdr", "p"))
rownames(gst) <- NULL
}
gst[gst$dir=="up", "Name"][1:10]
gst[gst$dir=="dn", "Name"][1:10]
doublingTime_N25_N50 <- c(doublingTime_N$`n=25`, doublingTime_N50)
doublingTime_N25_N50$logFC
View(doublingTime_N25_N50$logFC)
doublingTime_N25 <- doublingTime_N$`n=25`
rm(list=ls())
library(BBmisc)
library(piano)
library(snow)
doublingTime_N <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
doublingTime_quartiles <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_quartiles.Rda")
rm(doublingTime_quartiles)
doublingTime_N25 <- doublingTime_N$`n=25`
doublingTime_N50 <- doublingTime_N$`n=50`
for (i in c(doublingTime_N25, doublingTime_N50))
for (i in c(doublingTime_N25, doublingTime_N50)) {
geneStat <- i$logFC
names(geneStat) <- rownames(i)
}
i
library(PharmacoGx)
sessionInfo()
drugPerturbationSig()
args(drugPerturbationSig)
drugPerturbationSig
317/6263
250/5005
313/6237
408/8031
317+250+313+408
171+15+2+17
+28+8+6+2
44+205
data("CCLEsmall")
CCLEsmall@cell
which(CCLEsmall@cell=="MCF7")
which(CCLEsmall@cell=="MCF-7")
which(CCLEsmall@cell=="ssMCF7")
which(CCLEsmall@cell=="ssMCF-7")
which(CCLEsmall@cell=="HL60")
which(CCLEsmall@cell=="HL-60")
which(CCLEsmall@cell=="PC3")
which(CCLEsmall@cell=="PC-3")
which(CCLEsmall@cell=="SK-MEL-5")
which(CCLEsmall@cell=="SKMEL5")
which(CCLEsmall@cell=="SK-MEL5")
which(CCLEsmall@cell=="SKMEL-5")
rm(CCLEsmall)
rm(list=ls())
library(BBmisc)
library(piano)
library(snow)
doublingTime_N <- readRDS("~/Desktop/growth/data/results/diff_gene_exp_doublingTime_N.Rda")
doublingTime_N25 <- doublingTime_N$`n=25`
doublingTime_N50 <- doublingTime_N$`n=50`
geneStat <- doublingTime_N25$logFC
names(geneStat) <- rownames(doublingTime_N25)
pathwayDB <- "~/Desktop/growth/data/c5.bp.v6.2.symbols.gmt"
gscDf <- piano::loadGSC(file=pathwayDB)
gsaRes <- piano::runGSA(geneLevelStats=geneStat,
geneSetStat="gsea",
directions=NULL,
gsc=gscDf, nPerm=1000, ncpus=2)
